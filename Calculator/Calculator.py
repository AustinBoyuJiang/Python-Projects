# -*- coding: utf-8 -*-# Form implementation generated from reading ui file 'untitled.ui'## Created by: PyQt5 UI code generator 5.15.2## WARNING: Any manual changes made to this file will be lost when pyuic5 is# run again.  Do not edit this file unless you know what you are doing.import sys, pyautogui, ctypesfrom PyQt5.QtWidgets import *from PyQt5.QtCore import *from PyQt5.QtGui import *from PyQt5 import *class mainUi(QWidget):    def __init__(self):        super().__init__()        self.firstNum = ''        self.secondNum = '0'        self.lastSymbol = ''        self.start = False        self.flag = False        self.initWindow()        self.initTitleText()        self.initCloseButton()        self.initMinButton()        self.initText1()        self.initText2()        self.initButton()        self.show()    def initWindow(self):        width, height = 320, 550        self.resize(width, height)        self.move(self.center())        self.windowX = self.x()        self.windowY = self.y()        self.setMinimumWidth(width)        self.setMinimumHeight(height)        self.setMaximumWidth(width)        self.setMaximumHeight(height)        self.setWindowTitle('Calculator')        self.setWindowOpacity(0.9)        self.setStyleSheet("background-color: #e6e6e6;")        self.setWindowIcon(QIcon("calculator.ico"))        self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)    def initTitleText(self):        self.titleTxt = QLabel(self)        self.titleTxt.resize(230, 30)        self.titleTxt.move(10, 0)        self.titleTxt.setText('Calculator')        self.titleTxt.setAlignment(Qt.AlignLeft | Qt.AlignVCenter)        self.titleTxt.setStyleSheet("font-family: 'Arial';"                                    "font-size: 15px;"                                    "color: #000000;")    def initCloseButton(self):        self.closeButton = QPushButton(self)        self.closeButton.setObjectName('closeButton')        self.closeButton.setText('×')        self.closeButton.resize(40, 30)        self.closeButton.move(280, 0)        self.closeButton.clicked.connect(self.close)        self.closeButton.setToolTip('close')        self.closeButton.setStyleSheet("QPushButton#closeButton{font-family: Arial;"                                       "font-size: 20px;"                                       "border: 0px;}"                                       "QPushButton#closeButton:hover{background-color: #e81123;"                                       "color: #ffffff;}"                                       "QPushButton#closeButton:pressed{background-color: #f1707a;"                                       "color: #000000;}")    def initMinButton(self):        self.minButton = QPushButton(self)        self.minButton.setObjectName('minButton')        self.minButton.setText('-')        self.minButton.resize(40, 30)        self.minButton.move(240, 0)        self.minButton.clicked.connect(self.showMinimized)        self.minButton.setToolTip('minimized')        self.minButton.setStyleSheet("QPushButton#minButton{font-family: Arial;"                                     "font-size: 20px;"                                     "border: 0px;}"                                     "QPushButton#minButton:hover{background-color: #cfcfcf;}"                                     "QPushButton#minButton:pressed{background-color: #b8b8b8;}")    def initText1(self):        self.text1 = QLabel(self)        self.text1.resize(300, 12)        self.text1.move(5, 55)        self.text1.setText(self.firstNum)        self.text1.setAlignment(Qt.AlignRight | Qt.AlignVCenter)        self.text1.setStyleSheet("font-family: 'Arial';"                                 "font-size: 15px;"                                 "color: #5c5c5c;")    def initText2(self):        self.text2 = QLabel(self)        self.text2.resize(300, 50)        self.text2.move(5, 75)        self.text2.setText(self.secondNum)        self.text2.setAlignment(Qt.AlignRight | Qt.AlignVCenter)        self.text2.setStyleSheet("font-family: 'Arial';"                                 "font-size: 40px;"                                 "color: #000000;")    def initButton(self):        symbol = [['CE', 'C', '⌫', '×'],                  ['7', '8', '9', '÷'],                  ['4', '5', '6', '-'],                  ['1', '2', '3', '+'],                  ['%', '0', '.', '=']]        for i in range(5):            for j in range(4):                width = 78                height = 78                button = QPushButton(self)                if (i == 4 and j == 3):                    button.setObjectName('style3')                elif (i == 0 or j == 3):                    button.setObjectName('style2')                else:                    button.setObjectName('style1')                button.setText(symbol[i][j])                button.resize(width, height)                button.move(j * 80 + 1, i * 80 + 1 + 150)                button.clicked.connect(self.buttonEvent)                button.setStyleSheet("QPushButton{font-family: Arial;"                                     "font-size: 20px;"                                     "border: 0px;}"                                     "QPushButton#style1{background-color: #fafafa;}"                                     "QPushButton#style1:hover{background-color: #d1d1d1;}"                                     "QPushButton#style1:pressed{background-color: #bbbbbb;}"                                     "QPushButton#style2{background-color: #f0f0f0;}"                                     "QPushButton#style2:hover{background-color: #d1d1d1;}"                                     "QPushButton#style2:pressed{background-color: #bbbbbb;}"                                     "QPushButton#style3{background-color: #8abae0;}"                                     "QPushButton#style3:hover{background-color: #4599db;}"                                     "QPushButton#style3:pressed{background-color: #0078d7;}")    def buttonEvent(self):        push = self.sender().text()        if (push == 'C'):            self.firstNum = ''            self.secondNum = '0'            self.lastSymbol = ''            self.start = False            self.text1.setText(self.firstNum)            self.text2.setText(self.secondNum)        elif (push == 'CE'):            self.secondNum = '0'            self.start = False            self.text2.setText(self.secondNum)        elif (push == '⌫'):            self.secondNum = self.secondNum[0:-1]            if (self.secondNum == ''):                self.secondNum = '0'            self.text2.setText(self.secondNum)        elif (push == '='):            if (self.secondNum[-1] == '.'):                self.secondNum = self.secondNum[0:-1]            if (self.firstNum == ''):                self.firstNum = self.secondNum            if (float(self.secondNum) % 1 == 0):                self.secondNum = int(float(self.secondNum))                self.secondNum = str(self.secondNum)            if (self.start == False):                self.secondNum = self.firstNum                self.firstNum = ''                self.lastSymbol = ''                self.text1.setText(self.secondNum + '=')                self.text2.setText(self.secondNum)            else:                if (self.lastSymbol == ''):                    self.text1.setText(self.secondNum + '=')                else:                    self.text1.setText(self.firstNum + self.lastSymbol + self.secondNum + '=')                if ((self.lastSymbol == '÷' or self.lastSymbol == '%') and self.secondNum == '0'):                    self.firstNum = ''                    self.secondNum = '0'                    self.lastSymbol = ''                    self.start = False                    self.text2.setText('Error')                else:                    if (self.lastSymbol == ''):                        self.firstNum = float(self.firstNum)                    else:                        self.firstNum = eval(                            self.firstNum + self.lastSymbol.replace('×', '*').replace('÷', '/') + self.secondNum)                    self.firstNum = round(self.firstNum, 12)                    if (self.firstNum % 1 == 0):                        self.firstNum = int(self.firstNum)                    self.secondNum = str(self.firstNum)                    self.firstNum = ''                    self.lastSymbol = ''                    self.start = False                    self.text2.setText(self.secondNum)        elif (push in ['+', '-', '×', '÷', '%']):            if (self.secondNum[-1] == '.'):                self.secondNum = self.secondNum[0:-1]            if (self.firstNum == ''):                self.firstNum = self.secondNum            if (self.start == False):                self.lastSymbol = push                self.text1.setText(self.firstNum + self.lastSymbol)            else:                if ((self.lastSymbol == '÷' or self.lastSymbol == '%') and self.secondNum == '0'):                    self.firstNum = ''                    self.secondNum = '0'                    self.lastSymbol = ''                    self.start = False                    self.text2.setText('Error')                else:                    if (self.lastSymbol == ''):                        self.firstNum = float(self.firstNum)                    else:                        self.firstNum = eval(                            self.firstNum + self.lastSymbol.replace('×', '*').replace('÷', '/') + self.secondNum)                    self.firstNum = round(self.firstNum, 12)                    if (self.firstNum % 1 == 0):                        self.firstNum = int(self.firstNum)                    self.firstNum = str(self.firstNum)                    self.secondNum = '0'                    self.start = False                    self.lastSymbol = push                    self.text1.setText(self.firstNum + self.lastSymbol)                    self.text2.setText(self.firstNum)        else:            if ((self.secondNum == '0' or self.start == False) and push == '.'):                self.secondNum = '0.'            if (self.secondNum[-1] == '.' and push == '.'):                pass            elif (self.secondNum == '0' or self.start == False):                self.secondNum = push            else:                self.secondNum += push            self.start = True            self.text2.setText(self.secondNum)    def center(self):        window = self.frameGeometry()        center = QDesktopWidget().availableGeometry().center()        window.moveCenter(center)        return window.topLeft()    def mousePressEvent(self, event):        self.startX, self.startY = pyautogui.position()        if (event.windowPos().x() >= 0 and event.windowPos().x() <= 240):            if (event.windowPos().y() >= 0 and event.windowPos().y() <= 30):                self.flag = True    def mouseReleaseEvent(self, event):        self.windowX = self.x()        self.windowY = self.y()        self.flag = False    def mouseMoveEvent(self, event):        if (self.flag == True):            moveX, moveY = pyautogui.position()            nextX = self.windowX + moveX - self.startX            nextY = self.windowY + moveY - self.startY            self.move(nextX, nextY)if (__name__ == '__main__'):    ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID("myappid")    app = QApplication(sys.argv)    window = mainUi()    sys.exit(app.exec_())